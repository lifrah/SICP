;Exercise 1.1
;10
;12
;8
;3
; 6
;19
;#f
;4
; 16
;6
;16

;Exercise 1.2
(/
 (+ 5 4
    (- 2 (- 3 (+ 6 (/ 4 5)))))
 (* 3 (- 6 2) (- 2 7)))

;Exercise 1.3
(define (largest-sum-squares a b c)
  ;sum of a^2+b^2+c^2
  (+ (* a a) (* b b) (* c c)
     ;- (min a b c)^2
     (- (if (< a b)
            (if (< a c) (* a a) (* c c))
            (if (< b c) (* b b) (* с c))))))


;Exercise 1.4
;What the procedure does is if b›d then we have a+b, otherwise a-b.


;Exercise 1.5
(define (p) (p))

(define (test x y)
  (if (= × 0) 0 y))

;(test 0 (p))
;Given (test 0 (p))
;then would substitute to
;(if (= 0 0) 0 (p))
;For normal-order of evaluation we would have
;(if (= 0 0) 0 (p))
;to be fully expand to
;(if #t 0 (p))
;0
;While for applicative-order of evaluation we would have
;(if (= 0 0) 0 (p))
;into itsel recursively since it recursively evaluates its arguments

;Exercise 1.6
;It would compute the square root as the previous example.
(define (new-if predicate then-clause else-clause)
  (cond (predicate then-clause)
        (else else-clause)))

(define (square x)
  (* x x))

(define (average x y)
  (/ (+ x y) 2))

(define (improve guess x)
  (average guess (/ x guess)))

(define (good-enough? guess x)
  (< (abs (- (square guess) x)) 0.001))

;(define (sqrt-iter guess x)
;  (new-if (good-enough? guess x)
;          guess
;          (sqrt-iter (improve guess x) x)))

(define (sqrt x)
  (sqrt-iter 1.0 x))

;Using the applicative order of evaluation
; recursively expand (sqrt-iter 1.0 9) to
; (sqrt-iter 1.0 9) to
; (new-if (good-enough? guess 9)
;guess
;(sqrt-iter (improve guess 9) 9)))
; then expand (sqrt-iter (improve guess 9) 9)
; repeatedly forever.

;Exercise 1.7
;given
(define (sqrt-iter guess x)
  (if (good-enough? guess x)
      guess
      (sqrt-iter (improve guess x) x)))

(define (sqrt x)
  (sqrt-iter 1.0 x))

;Hence we can improve it as follow
(define (new-good-enough? guess x)
  (< (abs (- (square guess) x)) (* 0.001 guess)))

(define (new-sqrt-iter guess x)
  (if (new-good-enough? guess x)
      guess
      (new-sart-iter (improve guess x) x)))

(define (new-sqrt x)
  (new-sqrt-iter 1.0 x))

;Exercise 1.8
;Newton's method
(define (cube x)
  (* x (square x)))

(define (cube-average x y)
  (/ (+ (/ x (square y)) (* y 2)) 3))

(define (cube-good-enough? guess x)
  (< (abs (- (cube guess) x)) (* 0.001 guess)))

(define (cube-iter guess x)
  (if (cube-good-enough? guess x)
      guess
      (cube-iter (cube-average x guess) x)))

(define (cube-root x)
  (cube-iter 1.0 x))


;Exercise 1.9
;given
;(define (+ a b)
;  (if (= a 0)
;      b
;      (inc (+ (dec a) b))))
;and 
;(define (+ a b)
;  (if (= a 0)
;      b
;      (+ (dec a) (inc b))))

;For the first one we have
;(+ 4 5)
;(inc (+ (dec 4) 5))
;(inc (+ 3 5))
;(inc (inc (+ (dec 3) 5)))
;(inc (inc (+ 2 5)))
;(inc (inc (inc (+ (dec 2) 5))))
;(inc (inc (inc (+ 1 5))))
;(inc (inc (inc (inc (+ (dec 1) 5)))))
;(inc (inc (inc (inc (+ 0 5)))))
;(inc (inc (inc (inc 5))))
;(inc (inc (inc 6)))
;(inc (inc 7))
;(inc 8)
;9
;This process is recursive as it expands and contracts, whuch isn't linear.


;For the second one we have
;(+ 4 5)
;(+ (dec 4) (inc 5))
;(+ 3 6)
;(+ (dec 3) (inc 6))
;(+ 2 7)
;(+ (dec 2) (inc 7))
;(+ 1 8)
;(+ (dec 1) (inc 8))
;(+ 0 9)
;9
;This process is linear as it remains mostly the same, and doesn't "peak" unlike the previous one.


;Exercise 1.10
;(A 1 10)
;(A (- 1 1) (A 1 (- 10 1)))
;(A 0 (A 1 9))
;(* 2 (A 1 9))
;(* 2 (A (- 1 1) (A 1 (- 9 1))))
;(* 2 (A 0 (A 1 8)))
;(* 2 (* 2 (A 1 8)))
;(* 2 (* 2 (A (- 1 1) (A 1 (- 8 1)))))
;(* 2 (* 2 (A 0 (A 1 7))))
;(* 2 (* 2 (* 2 (A 1 7))))
;(* 2 (* 2 (* 2 (A (- 1 1) (A 1 (- 7 1))))))
;(* 2 (* 2 (* 2 (A 0 (A 1 6)))))
;(* 2 (* 2 (* 2 (* 2 (A 1 6)))))
;(* 2 (* 2 (* 2 (* 2 (A (- 1 1) (A 1 (-6 1)))))))
;(* 2 (* 2 (* 2 (* 2 (A 0 (A 1 5))))))
;(* 2 (* 2 (* 2 (* 2 (* 2 (A 1 5))))))
;(* 2 (* 2 (* 2 (* 2 (* 2 (A (- 1 1) (A 1 (- 5 1))))))))
;(* 2 (* 2 (* 2 (* 2 (* 2 (A 0 (A 1 4)))))))
;(* 2 (* 2 (* 2 (* 2 (* 2 (* 2 (A 1 4)))))))
;(* 2 (* 2 (* 2 (* 2 (* 2 (* 2 (A (- 1 1) (A 1 (- 4 1)))))))))
;(* 2 (* 2 (* 2 (* 2 (* 2 (* 2 (A 0 (A 1 3))))))))
;(* 2 (* 2 (* 2 (* 2 (* 2 (* 2 (* 2 (A 1 3))))))))
;(* 2 (* 2 (* 2 (* 2 (* 2 (* 2 (* 2 (A (- 1 1) (A 1 (- 3 1))))))))))
;(* 2 (* 2 (* 2 (* 2 (* 2 (* 2 (* 2 (A 0 (A 1 2)))))))))
;(* 2 (* 2 (* 2 (* 2 (* 2 (* 2 (* 2 (* 2 (A 1 2)))))))))
;(* 2 (* 2 (* 2 (* 2 (* 2 (* 2 (* 2 (* 2 (A (- 1 1) (A 1 (- 2 1)))))))))))
;(* 2 (* 2 (* 2 (* 2 (* 2 (* 2 (* 2 (* 2 (A 0 (A 1 1))))))))))
;(* 2 (* 2 (* 2 (* 2 (* 2 (* 2 (* 2 (* 2 (* 2 (A 1 1))))))))))
;(* 2 (* 2 (* 2 (* 2 (* 2 (* 2 (* 2 (* 2 (* 2 2)))))))))
;(* 2 (* 2 (* 2 (* 2 (* 2 (* 2 (* 2 (* 2 4))))))))
;(* 2 (* 2 (* 2 (* 2 (* 2 (* 2 (* 2 8)))))))
;(* 2 (* 2 (* 2 (* 2 (* 2 (* 2 16))))))
;(* 2 (* 2 (* 2 (* 2 (* 2 32)))))
;(* 2 (* 2 (* 2 (* 2 64))))
;(* 2 (* 2 (* 2 128)))
;(* 2 (* 2 256))
;(* 2 512)
;1024

(define (A x y) (cond ((= y 0) 0)
((= x 0) (* 2 y))
((= y 1) 2)
(else (A (- x 1) (A x (- y 1))))))

;(A 1 10)








